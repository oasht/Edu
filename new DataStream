class DataStream<T> {
    private final List<T> list;
    private final List<Action> actions = new ArrayList<>();

    private DataStream(List<T> list) {
        this.list = list;
    }

    @SafeVarargs
    public static <T> DataStream<T> of(T... args) {
        List<T> list = new ArrayList<>();
        Collections.addAll(list, args);
        return new DataStream<>(list);
    }

    public <R> DataStream<R> map(Function<T, R> function) {
        actions.add(MapAction.of(function));
        return (DataStream<R>) this;
    }

    public DataStream<T> filter(Predicate<T> rule) {
        actions.add(PredicateAction.of(rule));
        return this;
    }

    public <R> R collect(Supplier<R> init, BiConsumer<R, T> op) {
        R accumulator = init.get();
        for (Object t : list) {
            boolean pass = true;
            for (Action action : actions) {
                Optional o = action.apply(t);
                if (o.isEmpty()){
                    pass = false;
                    break;
                }
                t = o.get();
            }
            if(pass) op.accept(accumulator, (T)t);
        }
        return accumulator;
    }

    public T reduce(BinaryOperator<T> operator, T start) {
        for (Object t : list) {
            Object temp = t;
            boolean pass = true;
            for (Action action : actions) {
                Optional o = action.apply(temp);
                if (o.isEmpty()){
                    pass = false;
                    break;
                }
                temp= o.get();
            }
            if(pass) start = operator.apply(start, (T)t);
        }
        return start;
    }
}
